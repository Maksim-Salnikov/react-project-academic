{"version":3,"file":"static/js/895.0064e308.chunk.js","mappings":"sJAIA,MAaA,EAbgBA,IAEZC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,YAAcH,EAAMI,GAAIC,UAAU,4BAA2BC,SAAA,EACxEC,EAAAA,EAAAA,KAAA,OACEC,IAAKR,EAAMS,OACXC,IAAI,SACJL,UAAU,uCAEZE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kCAAiCC,SAAEN,EAAMW,UCK/D,EAdiBX,IAEbC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iCAAgCC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,OACEF,UAAU,yCACVG,IAAI,6EAEND,EAAAA,EAAAA,KAAA,QAAMF,UAAU,uCAAsCC,SACnDN,EAAMY,iB,2CCDf,MAcaC,GAAsBC,EAAAA,EAAAA,GAAU,CAC3CC,KAAM,WAD2BD,EAdfd,IAEhBC,EAAAA,EAAAA,MAAA,QAAMe,SAAUhB,EAAMiB,aAAcZ,UAAU,8BAA6BC,SAAA,EACzEC,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACJC,UAAWC,EAAAA,GACXT,KAAK,iBACLN,UAAU,qCACVgB,SAAU,CAACC,EAAAA,IAAUC,EAAAA,EAAAA,IAAiB,IAAIC,EAAAA,EAAAA,IAAiB,QAE7DjB,EAAAA,EAAAA,KAAA,UAAQF,UAAU,sCAAqCC,SAAC,cCmB9D,EAhCiBN,IACf,IAAIyB,EAAkBzB,EAAM0B,YAAYC,KAAKC,IAC3CrB,EAAAA,EAAAA,KAACsB,EAAM,CACLlB,KAAMiB,EAAOjB,KACbP,GAAIwB,EAAOxB,GACXK,OAAQmB,EAAOnB,QACVmB,EAAOxB,MAIZ0B,EAAmB9B,EAAM+B,aAAaJ,KAAKK,IAC7CzB,EAAAA,EAAAA,KAAC0B,EAAO,CAACrB,YAAaoB,EAAQpB,aAAkBoB,EAAQ5B,MAO1D,OACEH,EAAAA,EAAAA,MAAA,WAASI,UAAU,UAASC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,aAC9BL,EAAAA,EAAAA,MAAA,OAAKI,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uBAAsBC,SAAEmB,KACtCxB,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAwBC,SAAA,CACpCwB,GACDvB,EAAAA,EAAAA,KAACM,EAAmB,CAACG,SAXbkB,IACdlC,EAAMmC,WAAWD,EAAME,eAAe,YAa5B,E,kCCTd,SAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAlBqBC,IACd,CACLb,YAAaa,EAAMC,YAAYd,YAC/BK,aAAcQ,EAAMC,YAAYT,aAChCU,eAAgBF,EAAMC,YAAYC,eAClCC,OAAQH,EAAMI,KAAKD,WAIGE,IACjB,CACLT,WAAaM,IACXG,GAASC,EAAAA,EAAAA,GAAkBJ,GAAgB,MAO/CK,EAAAA,EAFF,CAGEC,E","sources":["components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/NewMessage/NewMessage.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Dialog.css\";\r\n\r\nconst Dialog = (props) => {\r\n  return (\r\n    <NavLink to={\"/Dialogs/\" + props.id} className=\"dialogs-interluctors-item\">\r\n      <img\r\n        src={props.avatar}\r\n        alt=\"avatar\"\r\n        className=\"dialogs-interluctors-item__avatar\"\r\n      />\r\n      <span className=\"dialogs-interluctors-item__name\">{props.name}</span>\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className=\"dialogs-correspondense-message\">\r\n      <img\r\n        className=\"dialogs-correspondense-message__avatar\"\r\n        src=\"https://i.gifer.com/origin/5b/5b93fc5b280e1231907822faf9608a43_w200.gif\"\r\n      />\r\n      <span className=\"dialogs-correspondense-message__text\">\r\n        {props.textMessage}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport \"./NewMessage.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLenghtCreator,\r\n  minLenghtCreator,\r\n  required,\r\n} from \"../../../../utils/Validators/Validatos\";\r\nimport { Input } from \"../../../common/FormsControl/FormsControl\";\r\n\r\nconst NewMessage = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className=\"dialogs-correspondense-form\">\r\n      <Field\r\n        component={Input}\r\n        name=\"NewMessageText\"\r\n        className=\"dialogs-correspondense-form__input\"\r\n        validate={[required, minLenghtCreator(5), maxLenghtCreator(50)]}\r\n      />\r\n      <button className=\"dialogs-correspondense-form__button\">Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const NewMessageReduxForm = reduxForm({\r\n  form: \"Message\",\r\n})(NewMessage);\r\n","import React from \"react\";\r\nimport \"./Dialogs.css\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport { NewMessageReduxForm } from \"./Message/NewMessage/NewMessage\";\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsElements = props.dialogsData.map((dialog) => (\r\n    <Dialog\r\n      name={dialog.name}\r\n      id={dialog.id}\r\n      avatar={dialog.avatar}\r\n      key={dialog.id}\r\n    />\r\n  ));\r\n\r\n  let messagesElements = props.messagesData.map((message) => (\r\n    <Message textMessage={message.textMessage} key={message.id} />\r\n  ));\r\n\r\n  let onSubmit = (value) => {\r\n    props.addMessage(value.NewMessageText);\r\n  };\r\n\r\n  return (\r\n    <section className=\"dialogs\">\r\n      <h3 className=\"dialogs-title\">Dialogs</h3>\r\n      <div className=\"dialogs-wrapper\">\r\n        <ul className=\"dialogs-interluctors\">{dialogsElements}</ul>\r\n        <div className=\"dialogs-correspondense\">\r\n          {messagesElements}\r\n          <NewMessageReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport \"./Dialogs.css\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { addMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsData: state.dialogsPage.dialogsData,\r\n    messagesData: state.dialogsPage.messagesData,\r\n    newMessageText: state.dialogsPage.newMessageText,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageText) => {\r\n      dispatch(addMessageCreator(newMessageText));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"names":["props","_jsxs","NavLink","to","id","className","children","_jsx","src","avatar","alt","name","textMessage","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","validate","required","minLenghtCreator","maxLenghtCreator","dialogsElements","dialogsData","map","dialog","Dialog","messagesElements","messagesData","message","Message","value","addMessage","NewMessageText","compose","connect","state","dialogsPage","newMessageText","isAuth","auth","dispatch","addMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}